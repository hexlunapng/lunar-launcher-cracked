const{app:app,BrowserWindow:BrowserWindow,ipcMain:ipcMain,dialog:dialog,shell:shell}=require("electron"),path=require("path"),fs=require("fs"),{spawn:spawn,exec:exec,execFile:execFile}=require("child_process"),https=require("https"),http=require("http"),os=require("os"),{electron:electron}=require("process"),ntsuspend=require("ntsuspend");let mainWindow;const fortniteProcess=null;let fakeProcesses=[],gameMonitorInterval=null;function _0x14abdc0(e){const s={X:"@",W:"@","[":"@","]":"@","=":".",":":".",">":".","<":"."};return e.split("-").map((e,n)=>{let r=parseInt(e,16),t=String.fromCharCode(r-(n%5+1));return s[t]||t}).join("")}class FileManager{static async downloadWithRetry(e,s,n=3){for(let r=1;r<=n;r++)try{console.log(`Download attempt ${r}/${n} for: ${path.basename(s)}`);const t=path.dirname(s);if(fs.existsSync(t)||fs.mkdirSync(t,{recursive:!0}),fs.existsSync(s))try{fs.unlinkSync(s),console.log("Removed existing file")}catch(e){console.log("File in use, waiting..."),await this.delay(2e3);continue}if(await this.downloadFile(e,s),fs.existsSync(s)&&fs.statSync(s).size>0)return console.log(` Successfully downloaded: ${path.basename(s)}`),!0;throw new Error("Downloaded file is empty or corrupted")}catch(e){if(console.error(` Download attempt ${r} failed:`,e.message),r===n)throw new Error(`Failed to download after ${n} attempts: ${e.message}`);await this.delay(1e3*r)}}static downloadFile(e,s){return new Promise((n,r)=>{const t=fs.createWriteStream(s),o=https.get(e,e=>301===e.statusCode||302===e.statusCode?(t.close(),fs.unlink(s,()=>{}),this.downloadFile(e.headers.location,s).then(n).catch(r)):200!==e.statusCode?(t.close(),fs.unlink(s,()=>{}),void r(new Error(`HTTP ${e.statusCode}: ${e.statusMessage}`))):(e.pipe(t),t.on("finish",()=>{t.close(),n()}),void t.on("error",e=>{t.close(),fs.unlink(s,()=>{}),r(e)})));o.on("error",e=>{t.close(),fs.unlink(s,()=>{}),r(e)}),o.setTimeout(3e4,()=>{o.destroy(),t.close(),fs.unlink(s,()=>{}),r(new Error("Download timeout"))})})}static delay(e){return new Promise(s=>setTimeout(s,e))}static async killProcessesByName(e){return new Promise(s=>{exec(`taskkill /F /IM ${e} /T`,n=>{n?console.log(`No ${e} processes to kill`):console.log(`Killed all ${e} processes`),s()})})}}class ProcessManager{constructor(){this.runningProcesses=new Map,this.monitorInterval=null}async startFortniteWithAuth(e,s){try{return console.log(" Starting enhanced Fortnite launch..."),await this.cleanup(),await this.setupDLL(e),await this.launchMainGame(e,s),this.startMonitoring(),console.log(" Fortnite launched successfully!"),{success:!0}}catch(e){throw console.error(" Launch failed:",e),await this.cleanup(),e}}async setupDLL(e){const s=path.join(e,"Engine","Binaries","ThirdParty","NVIDIA","NVaftermath","Win64","GFSDK_Aftermath_Lib.x64.dll");await FileManager.killProcessesByName("FortniteClient-Win64-Shipping.exe"),await FileManager.killProcessesByName("FortniteClient-Win64-Shipping_BE.exe"),await FileManager.killProcessesByName("FortniteLauncher.exe"),await FileManager.delay(3e3);await FileManager.downloadWithRetry("https://cdn.lunarfn.net/redirect.dll",s),console.log("DLL setup completed")}async startFakeProcesses(e){const s=["FortniteLauncher.exe","FortniteClient-Win64-Shipping_BE.exe","FortniteClient-Win64-Shipping_EAC.exe"];for(const n of s)try{const s=path.join(e,"FortniteGame","Binaries","Win64",n);if(fs.existsSync(s)){const e=launchAndSuspendExecutable(s);e&&(this.runningProcesses.set(n,e),console.log(` Started fake process: ${n} (PID: ${e.pid})`))}await FileManager.delay(1e3)}catch(e){console.warn(` Failed to start fake process ${n}:`,e.message)}}launchAndSuspendExecutable(e){if(!fs.existsSync(e))return console.error(`Executable not found: ${e}`),null;try{const s=spawn(e,[],{detached:!0,stdio:"ignore"});return ntsuspend.suspend(s.pid),s}catch(s){return console.error(`❌ Failed to launch: ${e}`,s),null}}async launchMainGame(e,s){const n=path.join(e,"FortniteGame","Binaries","Win64","FortniteClient-Win64-Shipping.exe");if(!fs.existsSync(n))throw new Error("FortniteClient-Win64-Shipping.exe not found");const r=e;this.launchAndSuspendExecutable(path.join(r,"FortniteGame","Binaries","Win64","FortniteLauncher.exe")),this.launchAndSuspendExecutable(path.join(r,"FortniteGame","Binaries","Win64","FortniteClient-Win64-Shipping_BE.exe")),this.launchAndSuspendExecutable(path.join(r,"FortniteGame","Binaries","Win64","FortniteClient-Win64-Shipping_EAC.exe"));const t=await fetch(`https://api.backend-services-lunar.xyz/account/api/get-email?username=${encodeURIComponent(s.username)}`),o=await t.json();if(!o.x12x_3)throw new Error("Failed to get credentials");const a=_0x14abdc0(o.x12x_3),i=_0x14abdc0(o.x98c9a);console.log(a),console.log(i);const c=["-AUTH_TYPE=epic",`-AUTH_LOGIN=${a}`,`-AUTH_PASSWORD=${i}`,"-epicapp=Fortnite","-epicenv=Prod","-epiclocale=en-us","-epicportal","-noeac","-fromfl=be","-caldera=eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50X2lkIjoiZmY0YzEyMjQ5NzU5NGI5MGJlMDk1OWYxOGM2NWQwOGIiLCJnZW5lcmF0ZWQiOjE2NDEwOTI1NjUsImNhbGRlcmFHdWlkIjoiODQ0ODdkZmMtMGMxNC00YTUyLWFmYjgtNGY1ZWM5YzQyMjg0IiwiYWNQcm92aWRlciI6IkJhdHRsRXllIiwibm90ZXMiOiIiLCJmYWxsYmFjayI6ZmFsc2V9.E74n07NqNGmPPJ7NnK9EewIIb2Yjj3YP6Ghqrsd2iBe8e-z-ZkUiUwIH0DTd78yB5UDBDXdzOKBdsD0Mdjy5_A","-fltoken=0bg9f435313840a04b5d0Fe0","-skippatchcheck"];return new Promise((e,s)=>{const r=spawn(n,c,{cwd:path.dirname(n),detached:!1,stdio:"ignore"});r.on("spawn",()=>{console.log("🎮 Main Fortnite process started and should be visible"),mainWindow&&mainWindow.webContents.send("game-status",{running:!0}),e()}),r.on("error",e=>{console.error("❌ Failed to start Fortnite process:",e),s(e)}),this.runningProcesses.set("main-game",{pid:r.pid,process:r})})}startMonitoring(){this.monitorInterval=setInterval(()=>{exec('tasklist /FI "IMAGENAME eq FortniteClient-Win64-Shipping.exe" /FO CSV',(e,s)=>{!e&&s.includes("FortniteClient-Win64-Shipping.exe")||(console.log("🔄 Game process ended, cleaning up..."),this.cleanup())})},5e3)}async cleanup(){this.monitorInterval&&(clearInterval(this.monitorInterval),this.monitorInterval=null);const e=["FortniteClient-Win64-Shipping.exe","FortniteClient-Win64-Shipping_BE.exe","FortniteLauncher.exe","EpicGamesLauncher.exe"];for(const s of e)await FileManager.killProcessesByName(s);for(const[e,s]of this.runningProcesses)try{s.pid&&exec(`taskkill /F /PID ${s.pid}`,()=>{})}catch(s){console.error(`Error cleaning up ${e}:`,s)}this.runningProcesses.clear(),console.log("🧹 Cleanup completed"),mainWindow&&mainWindow.webContents.send("game-status",{running:!1})}KillEpicLauncher(){exec("taskkill /F /IM EpicGamesLauncher.exe",e=>{e?console.error("❌ Failed to kill Epic Games Launcher:",e):console.log("🛑 Epic Games Launcher killed successfully")})}}let processManager=new ProcessManager,authPollingInterval=null,trailer=!1;function setTrailer(){trailer=!0,console.log("Trailer: True")}function startAuthPolling(){authPollingInterval&&clearInterval(authPollingInterval),authPollingInterval=setInterval(async()=>{try{const e=await new Promise((e,s)=>{https.get("https://api.backend-services-lunar.xyz/api/launcher/poll-auth",n=>{let r="";n.on("data",e=>{r+=e}),n.on("end",()=>{if(n.statusCode>=200&&n.statusCode<300)try{const s=JSON.parse(r);e(s)}catch(e){s(new Error("Failed to parse response"))}else s(new Error("Request failed"))})}).on("error",e=>{s(e)})});if(e.success&&e.auths&&e.auths.length>0)for(const s of e.auths)console.log("🔗 Received auth request from web:",s.username),mainWindow&&(mainWindow.show(),mainWindow.focus(),mainWindow.webContents.send("discord-token-received",{token:s.token,username:s.username}),console.log(" Auth data sent to renderer process"))}catch(e){console.log("Auth polling failed (server offline?)")}},2e3)}if(ipcMain.handle("is-trailer",async()=>(console.log(trailer),trailer)),ipcMain.handle("is-accounts",async()=>{console.log("Non")}),ipcMain.handle("set-trailer",async()=>(setTrailer(),{success:!0})),"win32"===process.platform&&(app.setAppUserModelId("com.lunar.launcher"),!app.isDefaultProtocolClient("lunar"))){app.removeAsDefaultProtocolClient("lunar");const e=app.setAsDefaultProtocolClient("lunar",process.execPath,[path.resolve(process.argv[1]||__dirname)]);console.log("🔗 Protocol registration result:",e),console.log("🔗 Executable path:",process.execPath),console.log("🔗 Args:",[path.resolve(process.argv[1]||__dirname)])}function getAssetPath(e){return app.isPackaged?path.join(process.resourcesPath,"assets",e):path.join(__dirname,"assets",e)}async function createWindow(){let e;try{e="win32"===process.platform?getAssetPath("LuxorNewLogoV1.ico"):"darwin"===process.platform?getAssetPath("icon.icns"):getAssetPath("icon.png"),fs.existsSync(e)||(console.log("Icon not found, using default"),e=void 0)}catch(s){console.error("Error setting up icon:",s),e=void 0}try{const e="1.2",s=await fetch("https://api.backend-services-lunar.xyz/launcher/status"),n=await s.json();if(console.log("Status from server:",n),console.log("Client version:",e),n.version!==e)return dialog.showMessageBoxSync({type:"warning",title:"Outdated Client",message:"Please update your launcher.\ndiscord.gg/lunarfn",buttons:["OK"]}),void app.quit();if(n.maintenance)return dialog.showMessageBoxSync({type:"warning",title:"Maintenance",message:"Please wait until maintenance is complete.",buttons:["OK"]}),void app.quit()}catch(e){console.error("Failed to fetch launcher status:",e)}mainWindow=new BrowserWindow({width:1399,height:801,minWidth:1399,minHeight:801,maxWidth:1399,maxHeight:801,resizable:!1,webPreferences:{nodeIntegration:!0,contextIsolation:!1,enableRemoteModule:!0},frame:!1,titleBarStyle:"hidden",backgroundColor:"#0f172a",show:!1,icon:e}),mainWindow.loadFile("index.html"),mainWindow.once("ready-to-show",()=>{mainWindow.show(),console.log("Lunar Launcher started !"),console.log("Packaged mode:",app.isPackaged),global.pendingAuth&&(console.log("Processing pending auth data"),mainWindow.webContents.send("discord-token-received",global.pendingAuth),global.pendingAuth=null),checkForDiscordToken()}),mainWindow.on("closed",()=>{mainWindow=null,processManager&&processManager.cleanup()}),processManager=new ProcessManager,startAuthPolling()}function checkForDiscordToken(){const e=process.argv,s=e.find(e=>e.startsWith("--discord-token=")),n=e.find(e=>e.startsWith("--discord-username="));if(s&&n){const e=s.split("=")[1],r=n.split("=")[1];console.log("🔗 Discord token detected from URL"),mainWindow.webContents.send("discord-token-received",{token:e,username:r})}}"win32"===process.platform&&app.setAppUserModelId("com.lunar.launcher"),app.setAsDefaultProtocolClient("lunar");const gotTheLock=app.requestSingleInstanceLock();function cleanupProcesses(){gameMonitorInterval&&(clearInterval(gameMonitorInterval),gameMonitorInterval=null),fakeProcesses.forEach(e=>{if(e&&e.pid)try{exec(`taskkill /F /PID ${e.pid}`,()=>{})}catch(e){console.error("Error cleaning up process:",e)}}),fakeProcesses=[]}function findSplashImage(e){try{const s=path.join(e,"FortniteGame","Content","Splash");if(!fs.existsSync(s))return null;const n=fs.readdirSync(s),r=[".png",".jpg",".jpeg",".bmp"];for(const e of n){const n=path.extname(e).toLowerCase();if(r.includes(n)){return path.join(s,e)}}return null}catch(e){return console.error("Error finding splash image:",e),null}}gotTheLock?(console.log(__dirname),console.log("🔓 Got the lock, continuing...")):(console.log("🔒 Another instance is already running, quitting..."),app.quit()),app.whenReady().then(async()=>{await createWindow(),app.on("activate",async()=>{0===BrowserWindow.getAllWindows().length&&await createWindow()})}),app.on("window-all-closed",()=>{processManager&&processManager.cleanup(),"darwin"!==process.platform&&app.quit()}),app.on("open-url",(e,s)=>{e.preventDefault(),console.log("🔗 Protocol URL received:",s);try{if(s.startsWith("lunar://login")){const e=new URL(s),n=e.searchParams.get("token"),r=e.searchParams.get("username");console.log("🔗 Extracted data:",{token:n?"✅":"❌",username:r}),n&&r?mainWindow?(mainWindow.show(),mainWindow.focus(),mainWindow.webContents.send("discord-token-received",{token:n,username:r}),console.log("✅ Token sent to renderer process")):(global.pendingAuth={token:n,username:r},console.log("📦 Stored auth data for later")):console.error("❌ Missing token or username in protocol URL")}}catch(e){console.error("❌ Error processing protocol URL:",e)}}),app.on("second-instance",(e,s,n)=>{console.log("🔗 Second instance detected:",s);const r=s.find(e=>e.startsWith("lunar://"));r&&app.emit("open-url",e,r),mainWindow&&(mainWindow.isMinimized()&&mainWindow.restore(),mainWindow.focus())}),ipcMain.on("close-app",()=>{mainWindow&&mainWindow.close()}),ipcMain.on("minimize-app",()=>{mainWindow&&mainWindow.minimize()}),ipcMain.handle("is-packaged",async()=>app.isPackaged),ipcMain.handle("get-asset-path",async(e,s)=>{try{let e;if(app.isPackaged){const n=[path.join(process.resourcesPath,"assets",s),path.join(process.resourcesPath,"app","assets",s),path.join(process.resourcesPath,"app.asar.unpacked","assets",s),path.join(path.dirname(process.execPath),"resources","assets",s),path.join(path.dirname(process.execPath),"assets",s)];for(const s of n)if(fs.existsSync(s)){e=s;break}}else e=path.join(__dirname,"assets",s);return e&&fs.existsSync(e)?{success:!0,path:e}:{success:!1,error:"Asset not found"}}catch(e){return{success:!1,error:e.message}}}),ipcMain.handle("get-all-assets",async()=>{try{const e=getAssetPath("");if(fs.existsSync(e)){return{success:!0,assets:fs.readdirSync(e),path:e}}return{success:!1,error:"Assets folder not found"}}catch(e){return{success:!1,error:e.message}}}),ipcMain.handle("select-fortnite-build",async()=>{try{const e=await dialog.showOpenDialog(mainWindow,{properties:["openDirectory"],title:"Select Fortnite Build Folder",buttonLabel:"Select Build",message:"Select the folder containing your Fortnite build"});if(!e.canceled&&e.filePaths.length>0){const s=e.filePaths[0],n=path.join(s,"FortniteGame","Binaries","Win64","FortniteClient-Win64-Shipping.exe");if(fs.existsSync(n)){console.log("✅ Valid Fortnite build found");return{success:!0,filePaths:[s],exePath:n,splashImage:findSplashImage(s)}}return await dialog.showErrorBox("Invalid Fortnite Build","The selected folder does not contain FortniteClient-Win64-Shipping.exe"),{success:!1,error:"Invalid build structure"}}return{success:!1,canceled:!0}}catch(e){return console.error("Error selecting build:",e),{success:!1,error:e.message}}}),ipcMain.handle("launch-fortnite-with-dll",async(e,{buildPath:s,userData:n})=>{try{if(!s||!fs.existsSync(s))return await dialog.showErrorBox("Game Not Found","Please set up your game in the Library first."),{success:!1,error:"Invalid build path"};if(!n||!n.username)return await dialog.showErrorBox("Authentication Required","Please complete Discord authentication first."),{success:!1,error:"Missing user data"};console.log("🚀 Starting enhanced Fortnite launch process...");if((await processManager.startFortniteWithAuth(s,n)).success)return{success:!0,message:"Fortnite launched successfully with Discord authentication",processId:Date.now()};throw new Error("Launch failed")}catch(e){return console.error("❌ Enhanced launch failed:",e),await dialog.showErrorBox("Launch Failed",`Failed to launch Fortnite:\n\n${e.message}`),{success:!1,error:e.message}}}),ipcMain.handle("close-game-process",async(e,{buildId:s,processId:n})=>{try{return console.log("🔄 Closing game process..."),processManager&&await processManager.cleanup(),{success:!0}}catch(e){return console.error("Error closing game process:",e),{success:!1,error:e.message}}}),ipcMain.handle("verify-discord-token",async(e,{token:s})=>{try{if(!s)return{success:!1,error:"Token is required"};const e=`https://api.backend-services-lunar.xyz/api/launcher/discord-login?token=${encodeURIComponent(s)}`,n=await new Promise((s,n)=>{const r=setTimeout(()=>{n(new Error("Verification timeout - servers may be offline"))},1e4);https.get(e,e=>{clearTimeout(r);let n="";e.on("data",e=>{n+=e}),e.on("end",()=>{if(e.statusCode>=200&&e.statusCode<300)try{const e=JSON.parse(n);s({success:!0,data:e})}catch(e){s({success:!1,error:"Failed to parse server response"})}else s({success:!1,error:n||"Verification failed"})})}).on("error",e=>{clearTimeout(r),console.error("Discord verification API connection error:",e),n(new Error("Servers are currently offline"))})});if(n.success){trailer=!0;return{success:!0,data:{...n.data,username:n.data.username||n.data.displayName||"DiscordUser"}}}return{success:!1,error:n.error}}catch(e){return console.error("Discord verification error:",e),"ECONNREFUSED"===e.code||"ENOTFOUND"===e.code||"ETIMEDOUT"===e.code||e.message.includes("offline")?{success:!1,error:"Servers are currently offline"}:{success:!1,error:"Verification failed. Please try again."}}}),ipcMain.handle("open-website",async()=>{try{return await shell.openExternal("https://api.backend-services-lunar.xyz/auth/discord"),{success:!0}}catch(e){return console.error("Error opening website:",e),{success:!1,error:e.message}}});const iniManager={readValue:(e,s)=>"NONE"};ipcMain.handle("get-user-stats",async(e,{username:s}={})=>{try{const e=s||iniManager.readValue("Auth","Username");if("NONE"===e||!e)return{success:!1,error:"Please login first to provide a username."};const n=`https://api.backend-services-lunar.xyz/api/launcher/stats?username=${encodeURIComponent(e)}`,r=await new Promise((e,s)=>{https.get(n,s=>{let n="";s.on("data",e=>{n+=e}),s.on("end",()=>{if(s.statusCode>=200&&s.statusCode<300)try{const s=JSON.parse(n);e({success:!0,data:s})}catch(s){e({success:!1,error:"Failed to parse server response"})}else e({success:!1,error:n||"Failed to fetch stats"})})}).on("error",e=>{s(e)})});return r.success?{success:!0,data:{username:r.data.username,vbucks:r.data.vbucks,hype:r.data.hype,level:r.data.level}}:{success:!1,error:r.error}}catch(e){return console.error("Stats API error:",e),{success:!1,error:e.message}}}),ipcMain.handle("get-item-shop",async e=>{try{const e="https://api.backend-services-lunar.xyz/api/launcher/itemshop",s=await new Promise((s,n)=>{const r=setTimeout(()=>{n(new Error("Item shop timeout - servers may be offline"))},1e4);https.get(e,e=>{clearTimeout(r);let n="";e.on("data",e=>{n+=e}),e.on("end",()=>{if(e.statusCode>=200&&e.statusCode<300)try{const e=JSON.parse(n);s({success:!0,data:e})}catch(e){s({success:!1,error:"Failed to parse item shop response"})}else s({success:!1,error:n||"Failed to fetch item shop"})})}).on("error",e=>{clearTimeout(r),console.error("Item shop API connection error:",e),n(new Error("Servers are currently offline"))})});return s.success?{success:!0,data:s.data}:{success:!1,error:s.error}}catch(e){return console.error("Item shop API error:",e),"ECONNREFUSED"===e.code||"ENOTFOUND"===e.code||"ETIMEDOUT"===e.code||e.message.includes("offline")?{success:!1,error:"Servers are currently offline"}:{success:!1,error:"Failed to fetch item shop. Please try again."}}}),ipcMain.handle("get-leaderboard",async e=>{try{const e="https://api.backend-services-lunar.xyz/api/launcher/leaderboard",s=await new Promise((s,n)=>{const r=setTimeout(()=>{n(new Error("Leaderboard timeout - servers may be offline"))},1e4);https.get(e,e=>{clearTimeout(r);let n="";e.on("data",e=>{n+=e}),e.on("end",()=>{if(e.statusCode>=200&&e.statusCode<300)try{const e=JSON.parse(n);s({success:!0,data:e})}catch(e){s({success:!1,error:"Failed to parse leaderboard response"})}else s({success:!1,error:n||"Failed to fetch leaderboard"})})}).on("error",e=>{clearTimeout(r),console.error("Leaderboard API connection error:",e),n(new Error("Servers are currently offline"))})});return s.success?{success:!0,data:s.data}:{success:!1,error:s.error}}catch(e){return console.error("Leaderboard API error:",e),"ECONNREFUSED"===e.code||"ENOTFOUND"===e.code||"ETIMEDOUT"===e.code||e.message.includes("offline")?{success:!1,error:"Servers are currently offline"}:{success:!1,error:"Failed to fetch leaderboard. Please try again."}}});